name: CI

on:
  push:
    branches:
      - master
      - 2.3-maintenance
  pull_request:
    branches:
      - master
      - 2.3-maintenance

jobs:
  setup:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}

      - uses: actions/cache@v2
        id: cache-npm
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('package*.json') }}

      - name: Setup Python
        uses: actions/setup-python@v1
        if: steps.cache-pip.outputs.cache-hit != 'true'
        with:
          python-version: 2.7

      - name: Setup Node
        uses: actions/setup-node@v1
        if: steps.cache-npm.outputs.cache-hit != 'true'
        with:
          node-version: 12.x

      - name: Install system dependencies
        if: steps.cache-pip.outputs.cache-hit != 'true'
        run: sudo apt-get install libpq-dev python-virtualenv

      - name: Install python dependencies
        if: steps.cache-pip.outputs.cache-hit != 'true'
        run: |
          virtualenv -p /usr/bin/python2.7 .venv
          source .venv/bin/activate
          pip install -U pip setuptools
          pip install -r requirements.dev.txt
          pip install -r requirements.txt

      - name: Install node dependencies
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm ci


  lint:
    needs: setup
    runs-on: ubuntu-18.04
    steps:
      # BEGIN common steps - edit all occurrences if needed!
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}

      - uses: actions/cache@v2
        id: cache-npm
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('package*.json') }}

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: 2.7

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Activate virtualenv for later steps
        run: |
          echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Install Indico
        run: pip install -e .
      # END common steps

      - name: Check import sorting
        run: isort -rc --diff --check-only indico/

      - name: Check backref comments
        if: success() || failure()
        run: python bin/maintenance/update_backrefs.py --ci

      - name: Check headers
        if: success() || failure()
        run: |
          echo "::add-matcher::.github/matchers/headers-problem-matcher.json"
          python bin/maintenance/update_header.py --ci
          echo "::remove-matcher owner=headers::"

      - name: Run flake8
        if: success() || failure()
        run: |
          echo "::add-matcher::.github/matchers/flake8-problem-matcher.json"
          flake8 --format '%(path)s:%(row)d:%(col)d: %(code)s %(text)s'
          echo "::remove-matcher owner=flake8::"

      - name: Try extracting i18n strings
        if: success() || failure()
        run: |
          echo "::add-matcher::.github/matchers/react-jsx-i18n-problem-matcher.json"
          FORCE_COLOR=1 npx react-jsx-i18n extract --ext jsx indico/web/client/ indico/modules/ > /dev/null
          echo "::remove-matcher owner=react-jsx-i18n::"

      - name: Run eslint
        if: success() || failure()
        run: npx eslint --ext .js --ext .jsx
             indico/modules/rb/
             indico/modules/events/logs/
             indico/modules/events/editing/
             indico/modules/events/client/js/reviewing/
             indico/modules/events/papers/client/js/
             indico/web/client/js/react/
             indico/modules/users/

      - name: Run stylelint for all files
        if: github.event_name == 'push' && (success() || failure())
        run: |
          echo "::add-matcher::.github/matchers/stylelint-problem-matcher.json"
          npx stylelint --formatter unix 'indico/**/*.{scss,css}'
          echo "::remove-matcher owner=stylelint::"

      # GitHub shows annotations for files not touched in the PR, which is very noisy in case
      # of stylelint warnings, so we only run it for changed files when running on PRs
      # https://github.com/actions/toolkit/issues/457
      - name: Get list of changed files
        if: github.event_name == 'pull_request' && (success() || failure())
        uses: ThiefMaster/changed-files-action@json-output
        with:
          repo-token: ${{ github.token }}
          pattern: '^.+\.s?css$'

      - name: Run stylelint for changed files
        if: github.event_name == 'pull_request' && (success() || failure())
        run: |
          echo "::add-matcher::.github/matchers/stylelint-problem-matcher.json"
          jq -rs '(.[0] + .[1]) | unique | .[]' ~/files_{created,updated}.json | tr '\n' '\0' | xargs -0 -r \
            npx stylelint --formatter unix
          echo "::remove-matcher owner=stylelint::"


  test-python:
    needs: setup
    runs-on: ubuntu-18.04

    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 5s --health-retries 10

    steps:
      # BEGIN common steps - edit all occurrences if needed!
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}

      - uses: actions/cache@v2
        id: cache-npm
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('package*.json') }}

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: 2.7

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Activate virtualenv for later steps
        run: |
          echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Install Indico
        run: pip install -e .
      # END common steps

      - name: Setup database
        run: |
          sudo apt-get install postgresql-client libpq-dev
          export PGHOST=localhost
          export PGPORT=${{ job.services.postgres.ports[5432] }}
          export PGUSER=postgres
          createuser indicotest
          createdb -O indicotest indicotest
          psql indicotest -c 'CREATE EXTENSION unaccent;'
          psql indicotest -c 'CREATE EXTENSION pg_trgm;'

      - name: Run pytest tests
        run: |
          export INDICO_TEST_DATABASE_URI="postgresql://indicotest@localhost:${{ job.services.postgres.ports[5432] }}/indicotest"
          pytest --color=yes


  test-js:
    needs: setup
    runs-on: ubuntu-18.04
    steps:
      # BEGIN common steps - edit all occurrences if needed!
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        id: cache-pip
        with:
          path: .venv
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}

      - uses: actions/cache@v2
        id: cache-npm
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('package*.json') }}

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: 2.7

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Activate virtualenv for later steps
        run: |
          echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Install Indico
        run: pip install -e .
      # END common steps

      - name: Run jest tests
        run: npm test

      - name: Try building assets
        run: python bin/maintenance/build-assets.py indico --dev
