// This file is part of Indico.
// Copyright (C) 2002 - 2023 CERN
//
// Indico is free software; you can redistribute it and/or
// modify it under the terms of the MIT License; see the
// LICENSE file for more details.

@use './palette';
@use './borders';

$semantic-color-map: (
  highlight: palette.$blue,
  success: palette.$green,
  error: palette.$red,
  warning: palette.$yellow,
  visited: palette.$purple,
  strong: palette.$black,
  editing-rejected: palette.$midnight-black,
  editing-make-changes: palette.$bright-yellow,
  editing-request-changes: palette.$dark-red,
);

// styles that are prefixed with 'editing-' are used exclusively
// in the editing module and should not be [mis]used elsewhere.

$semantic-styles: (
  highlight,
  success,
  error,
  warning,
  visited,
  strong,
  editing-rejected,
  editing-make-changes,
  editing-request-changes
);

@mixin _semantic-background($color) {
  @include borders.border-all($color);
  background: $color;
}

@mixin _semantic-outline($color) {
  @include borders.border-all($color);
  color: $color;
}

@mixin semantic-versions {
  @each $style in $semantic-styles {
    &.#{$style} {
      @content;
    }
  }
}

@mixin _semantic-colors {
  @each $style in $semantic-styles {
    &.#{$style} {
      color: map-get($semantic-color-map, $style);
    }
  }
}

@mixin semantic-background {
  @include _semantic-background(palette.$dark-gray);
  color: white;

  @each $style in $semantic-styles {
    &.#{$style} {
      @include _semantic-background(map-get($semantic-color-map, $style));
    }
  }
}

@mixin semantic-outline {
  @include _semantic-outline(palette.$dark-gray);

  @each $style in $semantic-styles {
    &.#{$style} {
      @include _semantic-outline(map-get($semantic-color-map, $style));
    }
  }
}

@mixin semantic-link {
  color: palette.$gray;

  &:not(.disabled) {
    &:hover,
    &:active,
    &.active {
      color: palette.$black;
      @include _semantic-colors();
    }
  }

  &.disabled {
    color: palette.$gray;
  }
}

.semantic-text {
  color: palette.$dark-gray;
  @include _semantic-colors();
}

.semantic-background {
  @include semantic-background();
}
